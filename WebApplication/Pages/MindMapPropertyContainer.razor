@using Newtonsoft.Json
@using Syncfusion.Blazor.Buttons
@using System.Collections.Generic
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using Newtonsoft.Json.Linq;
@using System.Drawing
@inject IJSRuntime js

@namespace WebApplicationDiagramBuilder

<div id='mindMapContainer' class="db-mindmap-prop-container">
    <div class="row db-prop-header-text">
        MindMap Pattern
    </div>
    <div class="row db-prop-row">
        <div class="col-xs-6 org-pattern-parent">
            <div class="mindmap-pattern-style mindmap-pattern1" @onclick="@MindmapPattern1Change"></div>
        </div>
        <div class="col-xs-6 org-pattern-parent">
            <div class="mindmap-pattern-style mindmap-pattern2" @onclick="@MindmapPattern2Change"></div>
        </div>
    </div>
    <div class="row db-prop-row" style="margin-top:5px">
        <div class="col-xs-6 org-pattern-parent">
            <div class="mindmap-pattern-style mindmap-pattern3" @onclick="@MindmapPattern3Change"></div>
        </div>
        <div class="col-xs-6 org-pattern-parent">
            <div class="mindmap-pattern-style mindmap-pattern4" @onclick="@MindmapPattern4Change"></div>
        </div>
    </div>
    <div class="db-prop-separator">
    </div>
    <div class="row db-prop-header-text">
        MindMap Levels Styles
    </div>
    <div class="row db-prop-row">
        <div class="col-xs-6 db-col-left">
            <SfDropDownList TValue="string" TItem="DefaultDropDownField" PopupHeight="230px" DataSource="@MindMapLevels" @bind-Value="@MindMapLevelValue">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                <DropDownListEvents TValue="string" TItem="DefaultDropDownField" ValueChange="@OnMindMapLevelChange"></DropDownListEvents>
            </SfDropDownList>
        </div>
    </div>
    <div id='mindMapFill' class="row db-prop-row">
        <div class="col-xs-6 db-col-left">
            <div class="db-color-container">
                <div class="db-color-input">
                    <SfColorPicker ID="mindmapFill" Mode="ColorPickerMode.Palette" ValueChange="@OnFillColorChange" @bind-Value="@FillColorValue"></SfColorPicker>
                </div>
                <div class="db-color-btn">
                    <SfButton ID="MindmapFillIconBtn" IconCss="sf-icon-ColorPickers tb-icons"></SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="row db-prop-row">
        <div class="col-xs-4 db-col-left">
            <div class="db-color-container">
                <div class="db-color-input">
                    <SfColorPicker ID="MindmapStroke" Mode="ColorPickerMode.Palette" ValueChange="@OnStrokeColorChange" @bind-Value="@StrokeColorValue"></SfColorPicker>
                </div>
                <div class="db-color-btn">
                    <SfButton ID="mindmapStrokeIconBtn" IconCss="sf-icon-Pickers tb-icons"></SfButton>
                </div>
            </div>
        </div>
        <div class="col-xs-4 db-col-center">
            <SfDropDownList ID="strokeStyle" TValue="string" TItem="BorderStylesFields" PopupWidth="160px" Index="0" DataSource="@BorderStyles" @bind-Value="@StrokeStyleValue">
                <DropDownListTemplates TItem="BorderStylesFields">
                    <ValueTemplate><div class='db-ddl-template-style'><span class='@((context as BorderStylesFields).ClassName)'></span></div></ValueTemplate>
                    <ItemTemplate><div class='db-ddl-template-style'><span class='@((context as BorderStylesFields).ClassName)'></span></div></ItemTemplate>
                </DropDownListTemplates>
                <DropDownListEvents TValue="string" TItem="BorderStylesFields" ValueChange="@OnStrokeDashArrayChange"></DropDownListEvents>
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <div class="col-xs-4 db-col-right">
            <SfNumericTextBox ID="mindmapStrokeWidth" Min="0" Step="0.5" @bind-Value="@MindMapStrokeWidth">
                <NumericTextBoxEvents TValue="double" ValueChange="@OnStrokeWidthChange"></NumericTextBoxEvents>
            </SfNumericTextBox>
        </div>
    </div>
    <div class="row db-prop-row">
        <div class="col-xs-2 db-col-right db-prop-text-style" style="padding-top: 6px">
            <span class="db-prop-text-style">Opacity</span>
        </div>
        <div class="col-xs-8 db-col-left" style="padding-right:10px">
            <SfSlider ID="mindmapOpacitySlider" Type="SliderType.MinRange" @bind-Value="@MindMapOpacity" Min="0" Max="100" Step="10">
                <SliderEvents TValue="double" OnChange="@(async e => { await OnMindMapOpacityChange(e.Value); })"></SliderEvents>
            </SfSlider>
        </div>
        <div class="col-xs-2 db-col-right">
            <input type="text" readOnly="readonly" id="mindmapOpacityText" class="db-readonly-input" />
        </div>
    </div>
    <div style="margin-top:10px;margin-bottom: 15px"></div>
    <div class="row db-prop-header-text">
        Text Style
    </div>
    <div class="row db-prop-row">
        <div class="col-xs-8 db-col-left">
            <SfDropDownList ID="MindmapFontFamilyList" TValue="string" TItem="FontFamilyListFields" DataSource="@FontFamilyList" @bind-Value="@TextFontFamily">
                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                <DropDownListEvents TValue="string" TItem="FontFamilyListFields" ValueChange="@OnFontFamilyChange"></DropDownListEvents>
            </SfDropDownList>
        </div>
        <div class="col-xs-4 db-col-right">
            <SfNumericTextBox ID="MindmapFontSize" Min="1" Step="1" @bind-Value="@TextFontSize">
                <NumericTextBoxEvents TValue="double" ValueChange="@OnTextFontSizeChanged"></NumericTextBoxEvents>
            </SfNumericTextBox>
        </div>
    </div>
    <div class="row db-prop-row">
        <div class="col-xs-6 db-col-left">
            <SfToolbar ID="MindmapTextStyleToolbar" OverflowMode="@OverflowMode.Scrollable">
                <ToolbarEvents Clicked="@OnTextStyleClick"></ToolbarEvents>
                <ToolbarItems>
                    <ToolbarItem PrefixIcon="sf-icon-Bold tb-icons" TooltipText="Bold" CssClass="@BoldCss"></ToolbarItem>
                    <ToolbarItem PrefixIcon="sf-icon-Italic tb-icons" TooltipText="Italic" CssClass="@ItalicCss"></ToolbarItem>
                    <ToolbarItem PrefixIcon="sf-icon-Underline tb-icons" TooltipText="Underline" CssClass="@UnderlineCss"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </div>
        <div class="col-xs-6 db-col-right" id="textColorDiv">
            <div class="db-color-container">
                <div class="db-color-input">
                    <SfColorPicker ID="mindmapTextColor" @bind-Value="@TextColor" Mode="ColorPickerMode.Palette" ValueChange="@OnTextColorChange"></SfColorPicker>
                </div>
                <div class="db-color-btn">
                    <SfButton ID="textColorIconBtn" IconCss="sf-icon-ColorPickers tb-icons"></SfButton>
                </div>
            </div>
        </div>
    </div>
    <div class="row db-prop-row">
        <div class="col-xs-2 db-col-right db-prop-text-style" style="padding-top: 6px">
            <span class="db-prop-text-style">Opacity</span>
        </div>
        <div class="col-xs-8 db-col-left" style="padding-right:10px">
            <SfSlider ID="mindmapTextOpacitySlider" Type="SliderType.MinRange" @bind-Value="@TextOpacity" Min="0" Max="100" Step="10">
                <SliderEvents TValue="double" OnChange="@(async e => { await OnTextOpacityChange(e.Value); })"></SliderEvents>
            </SfSlider>
        </div>
        <div class="col-xs-2 db-col-right">
            <input type="text" id="textNodeOpacityText" class="db-readonly-input" readOnly="readonly" />
        </div>
    </div>
</div>

@code {
    internal DiagramMain Parent;

    // Mind Map Levels
    #region

    public string MindMapLevelValue { get; set; }

    public class DefaultDropDownField
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }
    public List<DefaultDropDownField> MindMapLevels = new List<DefaultDropDownField>()
    {
        new DefaultDropDownField(){ Text= "Root", Value= "Level0" },
        new DefaultDropDownField(){ Text= "Level1", Value= "Level1" },
        new DefaultDropDownField(){ Text= "Level2", Value="Level2" },
        new DefaultDropDownField(){ Text= "Level3", Value="Level3" },
        new DefaultDropDownField(){ Text= "Level4", Value="Level4" },
        new DefaultDropDownField(){ Text= "Level5", Value="Level5" }
    };
    #endregion

    // Node Properties
    #region
    public string FillColorValue { get; set; }
    public string StrokeColorValue { get; set; }
    public string StrokeStyleValue { get; set; }
    public double MindMapStrokeWidth { get; set; }
    public double MindMapOpacity { get; set; }

    public class BorderStylesFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
        public string ClassName { get; set; }
    }

    public List<BorderStylesFields> BorderStyles = new List<BorderStylesFields>()
    {
        new BorderStylesFields() { Text= "None", Value="None", ClassName="ddl-svg-style ddl_linestyle_none" },
        new BorderStylesFields() { Text= "1,2", Value="1,2", ClassName="ddl-svg-style ddl_linestyle_one_two" },
        new BorderStylesFields() { Text= "3,3", Value="3,3", ClassName="ddl-svg-style ddl_linestyle_three_three" },
        new BorderStylesFields() { Text= "5,3", Value="5,3", ClassName="ddl-svg-style ddl_linestyle_five_three" },
        new BorderStylesFields() { Text= "4,4,1", Value="4,4,1", ClassName="ddl-svg-style ddl_linestyle_four_four_one" }
    };
    #endregion


    // Text Properties
    #region

    public string BoldCss = "tb-item-start";
    public string ItalicCss = "tb-item-middle";
    public string UnderlineCss = "tb-item-end";

    public string TextFontFamily { get; set; }
    public string TextColor { get; set; }
    public double TextFontSize { get; set; }
    public double TextOpacity { get; set; }

    public class FontFamilyListFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    public List<FontFamilyListFields> FontFamilyList = new List<FontFamilyListFields>()
    {
        new FontFamilyListFields(){ Text= "Arial", Value= "Arial", },
        new FontFamilyListFields(){ Text= "Aharoni", Value= "Aharoni" },
        new FontFamilyListFields(){ Text= "Bell MT", Value="Bell MT" },
        new FontFamilyListFields(){ Text= "Fantasy", Value= "Fantasy" },
        new FontFamilyListFields(){ Text= "Times New Roman", Value= "Times New Roman" },
        new FontFamilyListFields(){ Text= "Segoe UI", Value="Segoe UI" },
        new FontFamilyListFields(){ Text= "Verdana", Value= "Verdana" }
    };


    #endregion

    #region

    JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings
    {
        DefaultValueHandling = DefaultValueHandling.Ignore,
        StringEscapeHandling = StringEscapeHandling.EscapeNonAscii
    };

    public bool PreventPropertyChange { get; set; } = false;
    public string MindMapLevel;

    public void bindMindMapProperties()
    {
        SfDiagramComponent Diagram = Parent.DiagramContent.Diagram;
        Node Node;
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            Node =  Diagram.GetObject(Diagram.SelectionSettings.Nodes[0].ID) as Node;
           
        }
        else
        {
            Node = Diagram.Nodes[0];
        }
        var obj = JsonConvert.SerializeObject(Node.AdditionalInfo, jsonSerializerSettings);
        DiagramMainContent.NodeAddInfo NodeInfo = JsonConvert.DeserializeObject<DiagramMainContent.NodeAddInfo>(obj);
        MindMapLevelValue = "Level" + NodeInfo.Level;
        MindMapLevel = "Level" + NodeInfo.Level;
        FillColorValue = Node.Style.Fill;
        MindMapStrokeWidth = Node.Style.StrokeWidth;
        StrokeColorValue = Node.Style.StrokeColor;
        StrokeStyleValue = Node.Style.StrokeDashArray;
        MindMapOpacity = Node.Style.Opacity * 100;

        if (Node.Annotations.Count > 0)
        {
            TextStyle Style = Node.Annotations[0].Style;
            TextFontFamily = Style.FontFamily;
            TextFontSize = Style.FontSize;
            if (!Style.Color.Contains("#"))
            {
                int ColorValue = Color.FromName(Style.Color).ToArgb();
                string ColorHex = string.Format("{0:x6}", ColorValue);
                TextColor = "#" + ColorHex;
            }
            else
            {
                TextColor = Style.Color;
            }
            TextOpacity = Style.Opacity * 100;

            BoldCss = (Style.Bold) ? BoldCss + " tb-item-selected" : BoldCss.Replace(" tb-item-selected", "");
            ItalicCss = (Style.Italic) ? ItalicCss + " tb-item-selected" : ItalicCss.Replace(" tb-item-selected", "");
            UnderlineCss = (Style.TextDecoration == TextDecoration.Underline) ? UnderlineCss + " tb-item-selected" : UnderlineCss.Replace(" tb-item-selected", "");
        }
        StateHasChanged();
    }

    public async Task MindmapPattern1Change()
    {
        await MindmapPatternChange("pattern1");
    }
    public async Task MindmapPattern2Change()
    {
        await MindmapPatternChange("pattern2");
    }
    public async Task MindmapPattern3Change()
    {
        await MindmapPatternChange("pattern3");
    }
    public async Task MindmapPattern4Change()
    {
        await MindmapPatternChange("pattern4");
    }

    public async Task MindmapPatternChange(string type)
    {
        Node Node;
        Connector Connector;
        SfDiagramComponent Diagram = Parent.DiagramContent.Diagram;
        Diagram.StartGroupAction();
        for (int i = 0; i < Diagram.Nodes.Count; i++)
        {
            Node = Diagram.GetObject(Diagram.Nodes[i].ID)as Node;
             
            if (Node.ID != "textNode")
            {
                if (type == "pattern1")
                {
                    if (Node.ID == "rootNode")
                    {
                        Node.Height = 50;
                    }
                    else
                    {
                        Node.Height = 20;
                    }
                }
                else
                {
                    Node.Height = 50;
                }
            }
        }
        for (var i = 0; i < Diagram.Connectors.Count; i++)
        {
            Connector = Diagram.GetObject(Diagram.Connectors[i].ID)as Connector;
            switch (type)
            {
                case "pattern1":
                    Connector.Type = ConnectorSegmentType.Bezier;
                    break;
                case "pattern2":
                    Connector.Type = ConnectorSegmentType.Bezier;
                    break;
                case "pattern3":
                    Connector.Type = ConnectorSegmentType.Orthogonal;
                    break;
                case "pattern4":
                    Connector.Type = ConnectorSegmentType.Straight;
                    break;
            }
        }
        Diagram.EndGroupAction();
        await Diagram.DoLayout();
    }

    public void OnMindMapLevelChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DefaultDropDownField> args)
    {
        MindMapLevel = args.Value;
    }

    public async Task OnFillColorChange(ColorPickerEventArgs args)
    {
        await UpdateMindMapProperties("Fill", (args.CurrentValue).Hex);
    }

    public async Task OnStrokeColorChange(ColorPickerEventArgs args)
    {
        await UpdateMindMapProperties("StrokeColor", (args.CurrentValue).Hex);
    }

    public async Task OnStrokeDashArrayChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, BorderStylesFields> args)
    {
        await UpdateMindMapProperties("StrokeDashArray", args.Value);
    }

    public async Task OnMindMapOpacityChange(double Value)
    {
        await UpdateMindMapProperties("Opacity", (Value / 100).ToString());
    }

    public async Task OnStrokeWidthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await UpdateMindMapProperties("StrokeWidth", args.Value.ToString());
    }

    public async Task OnFontFamilyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FontFamilyListFields> args)
    {
        await UpdateMindMapProperties("FontFamily", args.Value);
    }

    public async Task OnTextFontSizeChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await UpdateMindMapProperties("FontSize", args.Value.ToString());
    }

    public async Task OnTextPositionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        await UpdateMindMapProperties("TextPosition", args.Value);
    }

    public async Task OnTextColorChange(ColorPickerEventArgs args)
    {
        await UpdateMindMapProperties("FontColor", (args.CurrentValue).Hex);
    }

    public async Task OnTextOpacityChange(double Value)
    {
        await UpdateMindMapProperties("TextOpacity", (Value / 100).ToString());
    }

    private async Task OnTextStyleClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;

        switch (commandType)
        {
            case "Bold":
                BoldCss = (!BoldCss.Contains(" tb-item-selected")) ? BoldCss + " tb-item-selected" : BoldCss.Replace(" tb-item-selected", "");
                break;
            case "Italic":
                ItalicCss = (!ItalicCss.Contains(" tb-item-selected")) ? ItalicCss + " tb-item-selected" : ItalicCss.Replace(" tb-item-selected", "");
                break;
            case "Underline":
                UnderlineCss = (!UnderlineCss.Contains(" tb-item-selected")) ? UnderlineCss + " tb-item-selected" : UnderlineCss.Replace(" tb-item-selected", "");
                break;
        }
        await UpdateMindMapProperties(commandType, "true");
        StateHasChanged();
    }

    public async Task UpdateMindMapProperties(string prop, string Value)
    {
        if (!PreventPropertyChange)
        {
            ObservableCollection<Node> Nodes = Parent.DiagramContent.Diagram.Nodes;
            if (Nodes.Count > 0)
            {
                Node Node;
                for (int i = 0; i < Nodes.Count; i++)
                {
                    Node = Parent.DiagramContent.Diagram.GetObject(Nodes[i].ID)as Node;
                    if (Node.AdditionalInfo != null)
                    {
                        var obj = JsonConvert.SerializeObject(Node.AdditionalInfo, jsonSerializerSettings);
                        DiagramMainContent.NodeAddInfo NodeInfo = JsonConvert.DeserializeObject<DiagramMainContent.NodeAddInfo>(obj);
                        if ("Level" + NodeInfo.Level.ToString() == MindMapLevel || NodeInfo.Level.ToString() == MindMapLevel)
                        {
                            switch (prop)
                            {
                                case "Fill":
                                    Node.Style.Fill = Value;
                                    break;
                                case "StrokeColor":
                                    Node.Style.StrokeColor = Value;
                                    //string[] Connectors = await Parent.DiagramContent.Diagram.GetEdges(Node.ID, false);
                                    //OnUpdateConnectorProperties(Connectors, Value);
                                    break;
                                case "StrokeDashArray":
                                    Node.Style.StrokeDashArray = Value;
                                    break;
                                case "StrokeWidth":
                                    Node.Style.StrokeWidth = Double.Parse(Value);
                                    break;
                                case "Opacity":
                                    Node.Style.Opacity = Double.Parse(Value);
                                    break;
                            }
                            if (Node.Annotations.Count > 0)
                            {
                                ShapeAnnotation Annotation = Node.Annotations[0];
                                switch (prop)
                                {
                                    case "FontFamily":
                                        Annotation.Style.FontFamily = Value;
                                        break;
                                    case "FontSize":
                                        Annotation.Style.FontSize = Int32.Parse(Value);
                                        break;
                                    case "FontColor":
                                        Annotation.Style.Color = Value;
                                        break;
                                    case "TextOpacity":
                                        Annotation.Style.Opacity = Double.Parse(Value);
                                        break;
                                    case "Bold":
                                        Annotation.Style.Bold = !Annotation.Style.Bold;
                                        break;
                                    case "Italic":
                                        Annotation.Style.Italic = !Annotation.Style.Italic;
                                        break;
                                    case "Underline":
                                        Annotation.Style.TextDecoration = (Annotation.Style.TextDecoration == TextDecoration.Underline) ? TextDecoration.None : TextDecoration.Underline;
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    @*public void OnUpdateConnectorProperties(string[] Connectors, string StrokeColor)
    {
        Connector Connector;
        for (int i = 0; i < Connectors.Length; i++)
        {
            Connector = Parent.DiagramContent.Diagram.GetObject(Connectors[i])as Connector;
            if (Connector != null)
            {
                Connector.Style.StrokeColor = StrokeColor;
            }
        }
    }*@

    #endregion

}