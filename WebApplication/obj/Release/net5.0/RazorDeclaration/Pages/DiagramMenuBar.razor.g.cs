// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebApplicationDiagramBuilder
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using WebApplicationDiagramBuilder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using WebApplicationDiagramBuilder.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
using Syncfusion.Blazor.Diagram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
    public partial class DiagramMenuBar : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 80 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
       

    internal DiagramMain Parent;
    private ElementReference input;
    

#line default
#line hidden
#nullable disable
#nullable restore
#line 85 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
                                          
    DiagramSaveDialog SaveDialogBox;
    

#line default
#line hidden
#nullable disable
#nullable restore
#line 87 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
                                             
SfDropDownButton FileButton;
SfDropDownButton WindowButton;
SfDropDownButton ArrangeButton;
SfDropDownButton ViewButton;
SfDropDownButton EditButton;
Syncfusion.Blazor.Inputs.SfUploader UploadFiles;
string ExtensionType = ".json";
SfContextMenu<ContextMenuItemModel> ContextMenu;
private List<string> DisableCollection;
public string diagramName { get; set; } = "Untitled Diagram";
public string value { get; set; }
public string menuclass { get; set; } = "db-diagram-name-container";

private async Task renameDiagram()
{
    menuclass += " db-edit-name";
    value = diagramName;
    await input.FocusAsync();
    await jsRuntime.InvokeVoidAsync("renameDiagram1", input);
}
private void diagramNameKeyDown(KeyboardEventArgs  args)
{
    if (args.Key == "Enter")
    {
        diagramName = "";
        string edit = " db-edit-name";
        if (menuclass.Contains(edit))
        {
            int first = menuclass.IndexOf(edit);
            menuclass = menuclass.Remove(first);
        }
    }
}

private void diagramNameChange( Microsoft.AspNetCore.Components.Web.FocusEventArgs args)
{
    diagramName = value;
    string edit = " db-edit-name";
    if (menuclass.Contains(edit))
    {
        int first = menuclass.IndexOf(edit);
        menuclass = menuclass.Remove(first);
    }
}
private void DropDownButtonOpen() {
    this.ItemSelection();
    for (int i = 0; i < FileMenuItems.Count; i++)
    {
        if (DisableCollection.IndexOf(FileMenuItems[i].Text) > -1)
        {
            FileMenuItems[i].Disabled = true;
        }
        else
        {

            FileMenuItems[i].Disabled = false;
        }
    }
}

public void OnMenuCreated()
{
    ContextMenu.Open();
}
private void DropDownfileOpenButtonOpen()
{
    this.ItemSelection();
    for(int i =0; i<EditMenuItems.Count; i++)
    {
        if(DisableCollection.IndexOf(EditMenuItems[i].Text) > -1)
        {
            EditMenuItems[i].Disabled = true;
        }
        else {

            EditMenuItems[i].Disabled = false;
        }
    }

}
private void DropDownViewButtonOpen()
{
    this.ItemSelection();
    for (int i = 0; i < ViewMenuItems.Count; i++)
    {
        if (DisableCollection.IndexOf(ViewMenuItems[i].Text) > -1)
        {
            ViewMenuItems[i].Disabled = true;
        }
        else
        {
            ViewMenuItems[i].Disabled = false;
        }
    }
}
private void DropDownArrangeButtonOpen()
{
    this.ItemSelection();
    for (int i = 0; i < ArrangeMenuItems.Count; i++)
    {
        if (DisableCollection.IndexOf(ArrangeMenuItems[i].Text) > -1)
        {
            ArrangeMenuItems[i].Disabled = true;
        }
        else
        {
            ArrangeMenuItems[i].Disabled = false;
        }
    }
}
private void DropDownWindowButtonOpen()
{
    this.ItemSelection();
}

public class ContextMenuItemModel
{
    public List<ContextMenuItemModel> Items { get; set; }
    public string Text { get; set; }
    public string Id { get; set; }
    public string IconCss { get; set; }
    public Boolean Separator { get; set; }
    public Boolean Disabled { get; set; }
}

private List<  ContextMenuItemModel> EditMenuItems = new List<  ContextMenuItemModel>{
                new   ContextMenuItemModel {Id ="EditMenuItemsUndo", Text= "Undo", IconCss="sf-icon-Undo" },
                new   ContextMenuItemModel { Id ="EditMenuItemsUndo",Text= "Redo", IconCss="sf-icon-Redo" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Id ="EditMenuItemsCut",Text= "Cut", IconCss="sf-icon-Cut" },
                new   ContextMenuItemModel { Id ="EditMenuItemsCopy",Text= "Copy", IconCss="sf-icon-Copy" },
                new   ContextMenuItemModel {Id ="EditMenuItemsPaste", Text= "Paste", IconCss="sf-icon-Paste" },
                new   ContextMenuItemModel {Id ="EditMenuItemsDelete", Text= "Delete", IconCss="sf-icon-Delete" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel {Id ="EditMenuItemsDuplicate", Text= "Duplicate"  },
                new   ContextMenuItemModel { Separator= true},
                new   ContextMenuItemModel { Id ="EditMenuItemsSelectAll",Text= "Select All" },
            };

private List<  ContextMenuItemModel> FileMenuItems = new List<  ContextMenuItemModel>{
                new   ContextMenuItemModel {Id ="FileMenuItemsNew", Text = "New" },
                new   ContextMenuItemModel {Id ="FileMenuItemsOpen", Text = "Open" },
                new   ContextMenuItemModel { Separator = true },
                new   ContextMenuItemModel { Id ="FileMenuItemsSave",Text = "Save", IconCss="sf-icon-Save" },
                new   ContextMenuItemModel { Id ="FileMenuItemsSaveAs",Text = "Save As" },
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 235 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
                                                                                                                  
            };
    private List<  ContextMenuItemModel> ViewMenuItems = new List<  ContextMenuItemModel>{
         new   ContextMenuItemModel { Id ="ViewMenuItemsZoomIn",Text="Zoom In", IconCss="sf-icon-ZoomIn" },
                new   ContextMenuItemModel { Id ="ViewMenuItemsZoomOut",Text="Zoom Out", IconCss="sf-icon-ZoomOut" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Text="Show Grid" ,IconCss="sf-icon-Selection"},
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Text="Snap To Grid" }
            };
    private List<  ContextMenuItemModel> ArrangeMenuItems = new List<  ContextMenuItemModel>
    {
                new   ContextMenuItemModel
                {
                    Text = "Align Objects",
                    Items = new List<  ContextMenuItemModel>
                    {
                        new   ContextMenuItemModel { Text="Left", IconCss="sf-icon-AlignLeft" },
                        new   ContextMenuItemModel { Text="Right", IconCss="sf-icon-AlignRight" },
                        new   ContextMenuItemModel { Text="Center", IconCss="sf-icon-AlignHorizontally" },
                        new   ContextMenuItemModel { Text="Top", IconCss="sf-icon-AilgnTop"},
                        new   ContextMenuItemModel { Text="Bottom", IconCss="sf-icon-AlignBottom" },
                        new   ContextMenuItemModel { Text="Middle", IconCss="sf-icon-AlignVertically" }
                    }
                },
                new   ContextMenuItemModel
                {
                    Text = "Distribute Objects",
                    Items = new List<  ContextMenuItemModel>
    {
                        new   ContextMenuItemModel {Text="Horizontally", IconCss="sf-icon-DistributeHorizontal" },
                        new   ContextMenuItemModel {Text="Vertically", IconCss="sf-icon-DistributeVertical" }
                    }
                },
                new   ContextMenuItemModel {
                    Text = "Match Size",
                    Items = new List<  ContextMenuItemModel>
    {
                        new   ContextMenuItemModel { Text="Both Width and Height" },
                        new   ContextMenuItemModel { Text="Width" },
                        new   ContextMenuItemModel { Text="Height" },
                    }
                },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Id ="ArrangeMenuItemsGroup",Text="Group" },
                new   ContextMenuItemModel { Id ="ArrangeMenuItemsUngroup",Text="Ungroup" }
            };
    private List<  ContextMenuItemModel> WindowMenuItems = new List<  ContextMenuItemModel>
        {
                new   ContextMenuItemModel { Text="Show Toolbar",IconCss="sf-icon-Selection" },
                new   ContextMenuItemModel { Text="Show Stencil",IconCss="sf-icon-Selection" },
                new   ContextMenuItemModel { Text="Show Properties",IconCss="sf-icon-Selection" },
               // new MenuItem { Text="Themes" }
            };
  private bool IsParent(string Text)
    {
        if (Text == "File" || Text == "Edit" || Text == "View" || Text == "Arrange" || Text == "Window" || Text == "Help")
            return true;
        else
            return false;
    }

    private string[] FieldChildren = new string[] { "Options" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 305 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
                                            
              if (SaveDialogBox != null)
                SaveDialogBox.Parent = this;
           

#line default
#line hidden
#nullable disable
#nullable restore
#line 311 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
                                               
    }

    }

    public bool enablePasteButten = false;

    public async Task MenuClick(Syncfusion.Blazor.Navigations.MenuEventArgs<ContextMenuItemModel> args)
    {
        bool Edit = false;
        bool File = false;
        bool Window = false;
        bool view = false;
        bool Arrange = false;

        Syncfusion.Blazor.Diagram.SfDiagramComponent diagram = Parent.DiagramContent.Diagram;
        string commandType = args.Item.Text.Replace(" ", "");
        switch (commandType.ToLower())
        {
            case "new":
                File = true;
                await jsRuntime.InvokeVoidAsync("CommonKeyboardCommands_newDiagram");
                break;
            case "open":
                File = true;
                await OpenUploadBox(true, ".json");
                break;
            case "undo":
                Edit = true;
                diagram.Undo();
                break;
            case "redo":
                Edit = true;
                diagram.Redo();
                break;
            case "cut":
                Edit = true;
                diagram.Cut();
                enablePasteButten = true;
                break;
            case "copy":
                Edit = true;
                enablePasteButten = true;
                diagram.Copy();
                break;
            case "paste":
                Edit = true;
                diagram.Paste();
                break;
            case "delete":
                Edit = true;
                bool GroupAction = false;
                diagram.BeginUpdate();
                if(diagram.SelectionSettings.Nodes.Count > 1 || diagram.SelectionSettings.Connectors.Count > 1 || ((diagram.SelectionSettings.Nodes.Count + diagram.SelectionSettings.Connectors.Count) > 1))
                {
                    GroupAction = true;
                }
                if (GroupAction)
                {
                    diagram.StartGroupAction();
                }
                    if (diagram.SelectionSettings.Nodes.Count != 0)
                {
                    for (var i = diagram.SelectionSettings.Nodes.Count-1; i >=0; i--)
                    {
                        var item = diagram.SelectionSettings.Nodes[i];

                        diagram.Nodes.Remove(item);
                    }
                }
                if (diagram.SelectionSettings.Connectors.Count != 0)
                {
                    for (var i = diagram.SelectionSettings.Connectors.Count-1; i >=0; i--)
                    {
                        var item1 = diagram.SelectionSettings.Connectors[i];

                        diagram.Connectors.Remove(item1);
                    }
                }
                if (GroupAction)
                {
                    diagram.EndGroupAction();
                }
                diagram.EndUpdate();
                break;
            case "duplicate":
                Edit = true;
                diagram.Copy();
                diagram.Paste();
                break;
            case "selectall":
                Edit = true;
                diagram.SelectAll();
                break;
            case "save":
                File = true;
                string fileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
                await Download(fileName);
                break;
            case "saveas":
                File = true;
                SaveDialogBox.DiagramfileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
                await SaveDialogBox.SaveDialog.Show();
                break;
            case "group":
                Arrange = true;
                if (diagram.SelectionSettings.Nodes.Count + diagram.SelectionSettings.Connectors.Count > 1)
                {
                    diagram.Group();
                }
                break;
            case "ungroup":
                Arrange = true;
                if (diagram.SelectionSettings.Nodes.Count + diagram.SelectionSettings.Connectors.Count > 0)
                {
                   diagram.UnGroup();
                }
                break;
            case "showtoolbar":
                Window = true;
                await Parent.Toolbar.HideElements("hide-toolbar");
                WindowMenuItems[0].IconCss = WindowMenuItems[0].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "showstencil":
                Window = true;
                await Parent.Toolbar.HideElements("hide-palette");
                WindowMenuItems[1].IconCss = WindowMenuItems[1].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "showproperties":
                Window = true;
                await Parent.Toolbar.HideElements("hide-properties");
                WindowMenuItems[2].IconCss = WindowMenuItems[2].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "left":
                Arrange = true;
                diagram.SetAlign(AlignmentOptions.Left);
                break;
            case "right":
                Arrange = true;
                diagram.SetAlign(AlignmentOptions.Right);
                break;
            case "center":
                Arrange = true;
                diagram.SetAlign(AlignmentOptions.Center);
                break;
            case "top":
                Arrange = true;
                diagram.SetAlign(AlignmentOptions.Top);
                break;
            case "bottom":
                Arrange = true;
                diagram.SetAlign(AlignmentOptions.Bottom);
                break;
            case "middle":
                Arrange = true;
                diagram.SetAlign(AlignmentOptions.Middle);
                break;
            case "horizontally":
                Arrange = true;
                diagram.SetDistribute(DistributeOptions.RightToLeft);
                break;
            case "vertically":
                Arrange = true;
                diagram.SetDistribute(DistributeOptions.BottomToTop);
                break;
            case "width":
                Arrange = true;
                diagram.SetSameSize(SizingMode.Width);
                break;
            case "height":
                Arrange = true;
                diagram.SetSameSize(SizingMode.Height);
                break;
            case "bothwidthandheight":
                Arrange = true;
                diagram.SetSameSize(SizingMode.Size);
                break;
            case "showgrid":
                view = true;
                diagram.BeginUpdate();
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.ShowLines;
                diagram.EndUpdate();
                ViewMenuItems[3].IconCss = ViewMenuItems[3].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "snaptogrid":
                view = true;
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.SnapToLines;
                ViewMenuItems[5].IconCss = ViewMenuItems[5].IconCss == null ? "sf-icon-Selection" : null;
                break;
            
            case "zoomin":
                view = true;
                Parent.DiagramContent.DiagramZoomIn();
                Parent.Toolbar.DiagramZoomValueChange();
                break;
            case "zoomout":
                view = true;
                Parent.DiagramContent.DiagramZoomOut();
                Parent.Toolbar.DiagramZoomValueChange();
                break;
        }
        if(Edit)
            EditButton.Toggle();
        if (File)
            FileButton.Toggle();
        if (Window)
            WindowButton.Toggle();
        if (view)
            ViewButton.Toggle();
        if (Arrange)
            ArrangeButton.Toggle();

        //Parent.DiagramContent.StateChanged();
    }

    

#line default
#line hidden
#nullable disable
#nullable restore
#line 563 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
       
    public async Task OpenUploadBox(bool isOpen, string extensionType)
    {
        ExtensionType = extensionType;
        await FileUtil.Click(jsRuntime);
        StateHasChanged();
    }
    public void ItemSelection()
    {
        List<string> DisableCollection = new List<string>();
        //SelectedItems SelectedItems = Parent.DiagramContent.Diagram.SelectedItems;
        double DiagramCount = Parent.DiagramContent.Diagram.Nodes.Count + Parent.DiagramContent.Diagram.Connectors.Count;
        ObservableCollection<object> collection = new ObservableCollection<object>();
        var nodes = Parent.DiagramContent.Diagram.SelectionSettings.Nodes;
        var connectors = Parent.DiagramContent.Diagram.SelectionSettings.Connectors;

        foreach (Node node in nodes)
        {
            collection.Add(node);
        }
        foreach (Connector connector in connectors)
        {
            collection.Add(connector);
        }
        
        
        Node node1 = collection.Count > 0 ? collection[0] as Node : null;
         Node node2 = collection.Count > 0 ? collection[0] as NodeGroup : null;
        Connector connector1 = collection.Count > 0 ? collection[0] as Connector : null;

        bool isLock = ((node1 != null && node1.Constraints.HasFlag(NodeConstraints.Drag)) || (connector1 != null && connector1.Constraints.HasFlag(ConnectorConstraints.Drag))) ? false : true;

        Dictionary<string, bool> Select = new Dictionary<string, bool>()
{
            {"Undo",!Parent.DiagramContent.IsUndo},
            {"Redo",!Parent.DiagramContent.IsRedo},
            {"Cut",collection.Count == 0?true:false},
            {"Copy",collection.Count == 0?true:false},
            {"Paste",!enablePasteButten},
            {"Delete",collection.Count == 0?true:false},
            {"Duplicate",collection.Count == 0?true:false},
            {"Select All",DiagramCount == 0?true:false},
        };
        Dictionary<string, bool> ArrangeSelect = new Dictionary<string, bool>()
{
   
            {"Align Objects",(collection.Count == 1 || collection.Count == 0)?true:false},
            {"Distribute Objects",(collection.Count == 1 || collection.Count == 0)?true:false},
            {"Match Size",(collection.Count == 1 || collection.Count == 0)?true:false},
            {"Lock",isLock},
            {"Unlock",(collection.Count == 0 ||!isLock)?true:false},
            {"Group",(collection.Count > 1)?false:true||(collection.Count == 1)?true:false||(collection.Count < 1)?false:true},
            {"Ungroup",(collection.Count==1 && node2 != null && (node2 as NodeGroup).Children  != null && (node2 as NodeGroup).Children.Length > 0)?false:true }
        };
        foreach (var Text in Select)
        {
            if (Text.Value)
            {
                DisableCollection.Add(Text.Key);
            }
        }

        foreach (var Text in ArrangeSelect)
        {
            if (Text.Value)
            {
                DisableCollection.Add(Text.Key);
            }
        }
        this.DisableCollection = DisableCollection;
    }

    public async Task Download(string fileName)
    {
        string data = Parent.DiagramContent.Diagram.SaveDiagram();
        await FileUtil.SaveAs(jsRuntime, data, fileName);
    }

    public void OnUploadSuccess(SuccessEventArgs args)
    {
        if (args.Operation != "remove")
        {
            var file1 = args.File;
            var file = file1.RawFile;
            var fileType = file1.Type.ToString();
        }
    }

    public async Task OnUploadFileSelected(Syncfusion.Blazor.Inputs.UploadingEventArgs args)
    {
        SfDiagramComponent Diagram = Parent.DiagramContent.Diagram;
        if (args.FileData.Type == "json")
        { 
            Parent.DiagramContent.DiagramSpinnerObj.Show();// = true;
            await Task.Delay(100);
            string json = await FileUtil.LoadFile(jsRuntime, args.FileData);
            json = json.Replace(System.Environment.NewLine, string.Empty);
            await Parent.DiagramContent.Diagram.LoadDiagram(json.ToString()); 
            Parent.DiagramContent.DiagramSpinnerObj.Hide();
        }
        else
        {
           
            Node Node = Diagram.SelectionSettings.Nodes[0];
            Diagram.BeginUpdate();
            Node.Shape = new ImageShape() { Type = Shapes.Image, Source = args.FileData.RawFile.ToString() };
            Diagram.EndUpdate();
        }
    }

    

#line default
#line hidden
#nullable disable
#nullable restore
#line 685 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMenuBar.razor"
       
    public bool EnableMenuItems(string itemText, ObservableCollection<object> collection)
    {

        if (itemText != "")
        {
            var commandType = itemText.Replace(" ", "");
            if (collection.Count == 0)
            {
                switch (commandType.ToLower())
                {
                    case "cut":
                        return true;
                    case "copy":
                        return true;
                    case "delete":
                        return true;
                    case "duplicate":
                        return true;
                }
            }
           
            if (!enablePasteButten && itemText == "Paste")
            {
                return true;
            }
            if ( itemText == "Undo")
            {

                return !this.Parent.DiagramContent.IsUndo;
            }
            if ( itemText == "Redo")
            {

                return !this.Parent.DiagramContent.IsRedo;
            }
            if (itemText == "Select All")
            {
                if (collection.Count == 0)
                {
                    return true;
                }
            }

            if (collection.Count > 1 || collection.Count == 0)
            {
                commandType = itemText.Replace(" ", "");
                switch (commandType.ToLower())
                {
                    case "sendtoback":
                        return true;
                    case "bringtofront":
                        return true;
                    case "sendbackward":
                        return true;
                    case "bringforward":
                        return true;
                }
            }

            if (collection.Count == 1 || collection.Count == 0)
            {
                commandType = itemText.Replace(" ", "");
                switch (commandType.ToLower())
                {
                    case "right":
                        return true;
                    case "left":
                        return true;
                    case "center":
                        return true;
                    case "top":
                        return true;
                    case "bottom":
                        return true;
                    case "middle":
                        return true;
                    case "horizontally":
                        return true;
                    case "vertically":
                        return true;
                    case "bothwidthandheight":
                        return true;
                    case "width":
                        return true;
                    case "height":
                        return true;
                    case "lock":
                        return true;
                    case "unlock":
                        return true;
                }
            }
        }
        return false;

    }

    public void CreditCardProcessing()
    {
        diagramName = "Credit Card Processing";
        StateHasChanged();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
