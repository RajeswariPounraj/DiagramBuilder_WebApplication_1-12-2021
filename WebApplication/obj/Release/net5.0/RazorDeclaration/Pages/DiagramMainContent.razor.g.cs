// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebApplicationDiagramBuilder
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using WebApplicationDiagramBuilder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using WebApplicationDiagramBuilder.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMainContent.razor"
using Syncfusion.Blazor.Diagram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMainContent.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMainContent.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
    public partial class DiagramMainContent : SampleBaseComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 66 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMainContent.razor"
       
    internal DiagramMain Parent;
    public SpinnerComponent DiagramSpinnerObj { get; set; }
    
    public ObservableCollection<Node> NodesCollection = new ObservableCollection<Node>();
    public ObservableCollection<Connector> ConnectorCollection = new ObservableCollection<Connector>();
    
    public SfDiagramComponent Diagram;
    public DiagramObjectCollection<Node> nodes { get; set; } = new DiagramObjectCollection<Node>();
    public DiagramObjectCollection<Connector> connectors  {get;set;}= new DiagramObjectCollection<Connector>();
    public Syncfusion.Blazor.Diagram.DiagramSelectionSettings SelectedModel { get; set; }
    HorizontalGridLines HGridline;
    VerticalGridLines VGridline;
    public string DiagramContainerClassName = "db-current-diagram-container";
    public IDiagramObject DiagramDrawingObject;
    public InteractionController DiagramTool = InteractionController.Default;
    public ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
    public double CurrentZoom { get; set; } = 1;
    public double minZoom { get; set; } = 0.25;
    public double maxZoom { get; set; } = 30;
    //public bool canAutoScroll { get; set; } = false;
    public bool DiagramShowPageBreaks;
    public PageOrientation DiagramOrientation = PageOrientation.Landscape;
    public double? DiagramPageWidth = 816;
    public double? DiagramPageHeight = 1056;
    double marginLeft = 5;
    double marginRight = 5;
    public string Hlinecolor { get; set; } = "#EEEEEE";
    bool IsMultiplePage = true;
    public bool IsUndo = false;
    public bool IsRedo = false;
    public string DiagramBgColor = "white";
    public double i { get; set; } = 0;
    //public DiagramFitOptions DigramFitOption;
    public SnapConstraints SnapConstraint = SnapConstraints.All & ~SnapConstraints.SnapToLines;
    public double[] SnapIntervals { get; set; } = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };

    //public bool ShowRuler = false;
    public bool DynamicGrid = false;

    public class NodeAddInfo 
    {
        public double Level;
        public string Orientation;
    }

    List<PageOptionElement> PageList = new List<PageOptionElement>();
    PageOptionElement ActivePage;

    protected override void OnInitialized()
    {
        InitDiagramModel();
        PageOptionElement pageOption = new PageOptionElement()
        {
            Diagram = "",
            Name = "Page1",
            PageSwitch = true
        };
        PageList.Add(pageOption);
        ActivePage = pageOption;
    }  
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //Spinner.PropertyChanged = this.OnPropertyChanged;
        Service.Notify += OnNotify;
        //UriHelper.NavigateTo("Buttons/DefaultFunctionalities?theme=material");
    }
    public async Task OnNotify(NotifyProperties prop)
    {
        await InvokeAsync(() =>
        {
            this.DiagramSpinnerObj.Hide();
            this.Service.Prop.HideSpinner = false;
            this.Service.Prop.RestricMouseEvents = false;
        });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {       
        await base.OnAfterRenderAsync(firstRender);
        if (this.DiagramSpinnerObj.HideClass == "sb-trans")
        {
            this.DiagramSpinnerObj.Hide();
            this.Service.Prop.HideSpinner = false;
            this.Service.Prop.RestricMouseEvents = false;
        }
    }

    private void NodeDefaults(IDiagramObject obj)
    {
        Node node = obj as Node;
        node.Ports = new DiagramObjectCollection<PointPort>()
        {
            new PointPort()
            {
                  ID = (obj as Node).ID + "Port1",
                  Shape = PortShapes.Square,
                  Width = 10,
                  Height = 10,
                  Visibility = PortVisibility.Connect,
                  Constraints = PortConstraints.Default|PortConstraints.Draw,
                  Offset = new DiagramPoint() { X = 0, Y = 0.5 },
            },
            new PointPort()
            {
                ID = (obj as Node).ID + "Port2",
                Shape = PortShapes.Square,
                Width = 10,
                Height = 10,
                Visibility = PortVisibility.Connect,
                Constraints = PortConstraints.Default|PortConstraints.Draw,
                Offset = new DiagramPoint() { X = 0.5, Y = 0 },
            },
            new PointPort()
            {
                  ID = (obj as Node).ID + "Port3",
                  Shape = PortShapes.Square,
                  Width = 10,
                  Height = 10,
                  Visibility = PortVisibility.Connect,
                  Constraints = PortConstraints.Default|PortConstraints.Draw,
                  Offset = new DiagramPoint() { X = 0.5, Y = 1 },
            },
            new PointPort()
            {
                  ID = (obj as Node).ID + "Port4",
                  Shape = PortShapes.Square,
                  Width = 10,
                  Height = 10,
                  Visibility = PortVisibility.Connect,
                  Constraints = PortConstraints.Default|PortConstraints.Draw,
                  Offset = new DiagramPoint() { X = 1, Y = 0.5 },
            },
        };
    }
        
    public async Task CreditProcessDiagram()
    {
        nodes.Clear();
        connectors.Clear();
        Diagram.ClearSelection();
        Parent.MenuBar.CreditCardProcessing();
        await Diagram.AddDiagramElements(flowNodes);
        await Diagram.AddDiagramElements(flowConnectors);
    }
   

    private void PositionChanged(PositionChangedEventArgs args)
    {
        Parent.DiagramPropertyPanel.UpdatePropertyPanel();
    }
    private void SizeChanged(SizeChangedEventArgs args)
    {
        Parent.DiagramPropertyPanel.UpdatePropertyPanel();
    }

    private void RotateChanged(RotationChangedEventArgs args)
    {
        Parent.DiagramPropertyPanel.NodeRotateAngleValue(args.NewValue.RotationAngle);
    }
    private void Drop(DropEventArgs args)
    {
        if(args.Element is Node)
        {
        Parent.DiagramPropertyPanel.slider();
        }
        else if(args.Element is Connector)
        {
            Parent.DiagramPropertyPanel.sliderConnector();
        }
    }

    private async Task SelectionChanged(SelectionChangedEventArgs args)
    {
        await Parent.Toolbar.EnableToolbarItems(args.NewValue, "selectionchange");
        int ObjectsLength = Diagram.SelectionSettings.Nodes.Count + Diagram.SelectionSettings.Connectors.Count;
        Parent.DiagramPropertyPanel.removeClassInElement("nodePropertyContainer", " multiple");
        Parent.DiagramPropertyPanel.removeClassInElement("nodePropertyContainer", " connector");
        if (ObjectsLength > 1 && (Diagram.SelectionSettings.Nodes.Count > 0 || (Diagram.SelectionSettings.Connectors.Count > 0)))
        {
            this.MultipleSelectionSettings(args.NewValue);
        }
        else if (ObjectsLength == 1 && (Diagram.SelectionSettings.Nodes.Count == 1 || Diagram.SelectionSettings.Connectors.Count == 1))
        {
            if (Diagram.SelectionSettings.Nodes.Count == 1)
            {
                if (DiagramContainerClassName.Contains("mindmap-diagram"))
                {
                    //Parent.MindMapPropertyPanel.bindMindMapProperties();
                }
                else
                {
                    Parent.DiagramPropertyPanel.PanelVisibility();
                    Parent.DiagramPropertyPanel.slider();
                }

            }
            else if (Diagram.SelectionSettings.Connectors.Count == 1)
            {
                if (Diagram.SelectionSettings.Connectors.Count > 0)
                {
                    Parent.DiagramPropertyPanel.PanelVisibility();
                    Parent.DiagramPropertyPanel.sliderConnector();
                }
            }
        }
        else
        {
            Parent.DiagramPropertyPanel.PanelVisibility();
            Parent.DiagramPropertyPanel.BindDiagramProperties();
        }
        StateHasChanged();
    }
    private async Task HistoryChange(HistoryChangedEventArgs args)
    {
        await Parent.Toolbar.EnableToolbarItems(new object() { }, "historychange");
    }
    private void ScrollChanged(ScrollChangedEventArgs args)
    {
        if(Parent.Toolbar.ZoomItemDropdownContent != FormattableString.Invariant($"{Math.Round(Parent.DiagramContent.CurrentZoom * 100)}") + "%")
        {
            Parent.Toolbar.DiagramZoomValueChange();
        }
    }

    private void MultipleSelectionSettings(ObservableCollection<IDiagramObject> SelectedItems)
    {
        Parent.DiagramPropertyPanel.PropertyPanelVisibility();
        bool showConnectorPanel = false; bool showNodePanel = false;
        bool showTextPanel = false; bool showConTextPanel = false;

        for (int i = 0; i < Diagram.SelectionSettings.Nodes.Count; i++)
        {
            Node Node = Diagram.SelectionSettings.Nodes[i];
            if (Node != null && (!showNodePanel || !showTextPanel))
            {
                showNodePanel = true;
                showTextPanel = Node.Annotations.Count > 0 && Node.Annotations[0].Content != "" ? true : false;
            }
        }
        for (int i = 0; i < Diagram.SelectionSettings.Connectors.Count; i++)
        {
            Connector Connector = Diagram.SelectionSettings.Connectors[i];
            if (Connector != null && (!showConnectorPanel || !showConTextPanel))
            {
                showConnectorPanel = true;
                showConTextPanel = Connector.Annotations.Count > 0 && Connector.Annotations[0].Content != "" ? true : false;
            }
        }
        if (showNodePanel)
        {
           
            Parent.DiagramPropertyPanel.gradientPropertyVisibility("nodePropertyContainer",true);
           
            Parent.DiagramPropertyPanel.addClassInElement("nodePropertyContainer"," multiple");
            
            if (showConnectorPanel)
            {
                
                Parent.DiagramPropertyPanel.addClassInElement("nodePropertyContainer"," connector");
            }
            if (Diagram.SelectionSettings.Nodes.Count == 1)
                Parent.DiagramPropertyPanel.SingleNodeSelection();
        }
        if (showConnectorPanel && !showNodePanel)
        {
            Parent.DiagramPropertyPanel.PanelVisibility();
            
            Parent.DiagramPropertyPanel.SingleConnectorSelection();
        }
        if (showTextPanel || showConTextPanel)
        { 
            Parent.DiagramPropertyPanel.TextPropertyPanelVisibility(); 
        }
    }
    public void UpdateTool()
    {
        DiagramTool = InteractionController.ZoomPan;
        StateHasChanged();
    }
    public void DrawingObject(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        if (args.Item.Text == "Rectangle")
            {
                DiagramDrawingObject = new Node() { Shape = new BasicShape() { Type = Shapes.Basic, Shape = BasicShapeType.Rectangle }, Style = new ShapeStyle() {  StrokeWidth = 2 } };
            }
            else if (args.Item.Text == "Ellipse")
            {
                DiagramDrawingObject = new Node() { Shape = new BasicShape() { Type = Shapes.Basic, Shape = BasicShapeType.Ellipse }, Style = new ShapeStyle() {  StrokeWidth = 2 } };
            }
            else if (args.Item.Text == "Polygon")
            {
                DiagramDrawingObject = new Node() { Shape = new BasicShape() { Type = Shapes.Basic, Shape = BasicShapeType.Polygon }, Style = new ShapeStyle() {  StrokeWidth = 2 } };
            }
            else if (args.Item.Text == "Straight Line")
            {
                Parent.DiagramContent.DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Straight, Constraints = ConnectorConstraints.Default, Style = new ShapeStyle() {  StrokeWidth = 2 } };
            }
            else if (args.Item.Text == "Orthogonal Line")
            {
                Parent.DiagramContent.DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Orthogonal, Constraints = ConnectorConstraints.Default, Style = new ShapeStyle() {  StrokeWidth = 2 } };
            }
            else if (args.Item.Text == "Bezier")
            {
                Parent.DiagramContent.DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Bezier, Constraints = ConnectorConstraints.Default, Style = new ShapeStyle() {  StrokeWidth = 2 } };
            }
    }
    public void UpdateContinousDrawTool()
    {
        DiagramTool = InteractionController.ContinuousDraw;
        StateHasChanged();
    }
     public void UpdatePointerTool()
    {  
        DiagramTool = InteractionController.SingleSelect | InteractionController.MultipleSelect;
        StateHasChanged();
    }
    public void DiagramZoomIn()
    {        
        CurrentZoom = (CurrentZoom + 0.2);
        StateHasChanged();
    }
    public void DiagramZoomOut()
    {        
        CurrentZoom = (CurrentZoom - 0.2);
        StateHasChanged();
    }
    

#line default
#line hidden
#nullable disable
#nullable restore
#line 400 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\DiagramMainContent.razor"
       

    public void StateChanged()
    {
        //StateHasChanged();
    }
    public void LoadNewDiagram(string Json)
    {
         Diagram.LoadDiagram(Json);
        //Parent.LeftSideBar.DiagramOverview.SetDiagramID(Diagram.ID);
    }

    public class PageOptionElement
    {
        public string Diagram { get; set; }
        public bool PageSwitch { get; set; }
        public string Name { get; set; }
    }

    private async Task ShowPageData(PageOptionElement page)
    {
        this.DiagramSpinnerObj.Show();
        ActivePage.Diagram = Diagram.SaveDiagram();
        ActivePage.PageSwitch = false;      
        await Diagram.LoadDiagram(page.Diagram.ToString());
        this.DiagramSpinnerObj.Hide();
        page.PageSwitch = true;
        if(ActivePage != page)
        {
            Diagram.ClearHistory();
        }
        ActivePage = page;
    }

    private async Task AddNewPage()
    {
        ActivePage.Diagram = Diagram.SaveDiagram();
        ActivePage.PageSwitch = false;

        PageOptionElement pageOption = new PageOptionElement()
        {
            Diagram = "",
            Name = "Page" + (PageList.Count + 1).ToString(),
            PageSwitch = true
        };
        Diagram.Nodes.Clear();
        Diagram.Connectors.Clear();
        Diagram.ClearSelection();
        Diagram.ClearHistory();
        scrollLimit  = ScrollLimitMode.Infinity;
        CurrentZoom  = 1;
        minZoom = 0.25;
        maxZoom = 30;
        //canAutoScroll  = false;
        DiagramOrientation = PageOrientation.Landscape;
        DiagramPageWidth = 816;
        DiagramPageHeight = 1056;
        PageList.Add(pageOption);
        ActivePage = pageOption;
    }
    private PageOptionElement findPage(string id)
    {
        for (var i = 0; i < this.PageList.Count; i++)
        {
            if (this.PageList[i].Name == id)
            {
                return this.PageList[i];
            }
        }
        return null;
    }

    public void AddNodes(ObservableCollection<Node> Nodes)
    {
        Diagram.BeginUpdate();
        for (int i = 0; i < Nodes.Count; i++)
        {
            NodesCollection.Add(Nodes[i]);
        }
        Diagram.EndUpdate();
    }

    public void AddConnectors(ObservableCollection<Connector> Connectors)
    {
        Diagram.BeginUpdate();
        for (int i = 0; i < Connectors.Count; i++)
        {
            ConnectorCollection.Add(Connectors[i]);
        }
        Diagram.EndUpdate();
    }
    public void Dispose()
    {
        Service.Notify -= OnNotify;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
