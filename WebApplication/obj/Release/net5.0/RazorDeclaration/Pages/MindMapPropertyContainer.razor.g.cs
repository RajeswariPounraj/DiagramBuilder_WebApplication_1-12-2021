// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebApplicationDiagramBuilder
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using WebApplicationDiagramBuilder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\_Imports.razor"
using WebApplicationDiagramBuilder.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using Syncfusion.Blazor.Diagram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
    public partial class MindMapPropertyContainer : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 154 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
       
    internal DiagramMain Parent;

    // Mind Map Levels
    #region

    public string MindMapLevelValue { get; set; }

    public class DefaultDropDownField
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }
    public List<DefaultDropDownField> MindMapLevels = new List<DefaultDropDownField>()
    {
        new DefaultDropDownField(){ Text= "Root", Value= "Level0" },
        new DefaultDropDownField(){ Text= "Level1", Value= "Level1" },
        new DefaultDropDownField(){ Text= "Level2", Value="Level2" },
        new DefaultDropDownField(){ Text= "Level3", Value="Level3" },
        new DefaultDropDownField(){ Text= "Level4", Value="Level4" },
        new DefaultDropDownField(){ Text= "Level5", Value="Level5" }
    };
    #endregion

    // Node Properties
    #region
    public string FillColorValue { get; set; }
    public string StrokeColorValue { get; set; }
    public string StrokeStyleValue { get; set; }
    public double MindMapStrokeWidth { get; set; }
    public double MindMapOpacity { get; set; }

    public class BorderStylesFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
        public string ClassName { get; set; }
    }

    public List<BorderStylesFields> BorderStyles = new List<BorderStylesFields>()
    {
        new BorderStylesFields() { Text= "None", Value="None", ClassName="ddl-svg-style ddl_linestyle_none" },
        new BorderStylesFields() { Text= "1,2", Value="1,2", ClassName="ddl-svg-style ddl_linestyle_one_two" },
        new BorderStylesFields() { Text= "3,3", Value="3,3", ClassName="ddl-svg-style ddl_linestyle_three_three" },
        new BorderStylesFields() { Text= "5,3", Value="5,3", ClassName="ddl-svg-style ddl_linestyle_five_three" },
        new BorderStylesFields() { Text= "4,4,1", Value="4,4,1", ClassName="ddl-svg-style ddl_linestyle_four_four_one" }
    };
    #endregion


    // Text Properties
    #region

    public string BoldCss = "tb-item-start";
    public string ItalicCss = "tb-item-middle";
    public string UnderlineCss = "tb-item-end";

    public string TextFontFamily { get; set; }
    public string TextColor { get; set; }
    public double TextFontSize { get; set; }
    public double TextOpacity { get; set; }

    public class FontFamilyListFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    public List<FontFamilyListFields> FontFamilyList = new List<FontFamilyListFields>()
    {
        new FontFamilyListFields(){ Text= "Arial", Value= "Arial", },
        new FontFamilyListFields(){ Text= "Aharoni", Value= "Aharoni" },
        new FontFamilyListFields(){ Text= "Bell MT", Value="Bell MT" },
        new FontFamilyListFields(){ Text= "Fantasy", Value= "Fantasy" },
        new FontFamilyListFields(){ Text= "Times New Roman", Value= "Times New Roman" },
        new FontFamilyListFields(){ Text= "Segoe UI", Value="Segoe UI" },
        new FontFamilyListFields(){ Text= "Verdana", Value= "Verdana" }
    };


    #endregion

    #region

    JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings
    {
        DefaultValueHandling = DefaultValueHandling.Ignore,
        StringEscapeHandling = StringEscapeHandling.EscapeNonAscii
    };

    public bool PreventPropertyChange { get; set; } = false;
    public string MindMapLevel;

    public void bindMindMapProperties()
    {
        SfDiagramComponent Diagram = Parent.DiagramContent.Diagram;
        Node Node;
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            Node =  Diagram.GetObject(Diagram.SelectionSettings.Nodes[0].ID) as Node;
           
        }
        else
        {
            Node = Diagram.Nodes[0];
        }
        var obj = JsonConvert.SerializeObject(Node.AdditionalInfo, jsonSerializerSettings);
        DiagramMainContent.NodeAddInfo NodeInfo = JsonConvert.DeserializeObject<DiagramMainContent.NodeAddInfo>(obj);
        MindMapLevelValue = "Level" + NodeInfo.Level;
        MindMapLevel = "Level" + NodeInfo.Level;
        FillColorValue = Node.Style.Fill;
        MindMapStrokeWidth = Node.Style.StrokeWidth;
        StrokeColorValue = Node.Style.StrokeColor;
        StrokeStyleValue = Node.Style.StrokeDashArray;
        MindMapOpacity = Node.Style.Opacity * 100;

        if (Node.Annotations.Count > 0)
        {
            TextStyle Style = Node.Annotations[0].Style;
            TextFontFamily = Style.FontFamily;
            TextFontSize = Style.FontSize;
            if (!Style.Color.Contains("#"))
            {
                int ColorValue = Color.FromName(Style.Color).ToArgb();
                string ColorHex = string.Format("{0:x6}", ColorValue);
                TextColor = "#" + ColorHex;
            }
            else
            {
                TextColor = Style.Color;
            }
            TextOpacity = Style.Opacity * 100;

            BoldCss = (Style.Bold) ? BoldCss + " tb-item-selected" : BoldCss.Replace(" tb-item-selected", "");
            ItalicCss = (Style.Italic) ? ItalicCss + " tb-item-selected" : ItalicCss.Replace(" tb-item-selected", "");
            UnderlineCss = (Style.TextDecoration == TextDecoration.Underline) ? UnderlineCss + " tb-item-selected" : UnderlineCss.Replace(" tb-item-selected", "");
        }
        StateHasChanged();
    }

    public async Task MindmapPattern1Change()
    {
        await MindmapPatternChange("pattern1");
    }
    public async Task MindmapPattern2Change()
    {
        await MindmapPatternChange("pattern2");
    }
    public async Task MindmapPattern3Change()
    {
        await MindmapPatternChange("pattern3");
    }
    public async Task MindmapPattern4Change()
    {
        await MindmapPatternChange("pattern4");
    }

    public async Task MindmapPatternChange(string type)
    {
        Node Node;
        Connector Connector;
        SfDiagramComponent Diagram = Parent.DiagramContent.Diagram;
        Diagram.StartGroupAction();
        for (int i = 0; i < Diagram.Nodes.Count; i++)
        {
            Node = Diagram.GetObject(Diagram.Nodes[i].ID)as Node;
             
            if (Node.ID != "textNode")
            {
                if (type == "pattern1")
                {
                    if (Node.ID == "rootNode")
                    {
                        Node.Height = 50;
                    }
                    else
                    {
                        Node.Height = 20;
                    }
                }
                else
                {
                    Node.Height = 50;
                }
            }
        }
        for (var i = 0; i < Diagram.Connectors.Count; i++)
        {
            Connector = Diagram.GetObject(Diagram.Connectors[i].ID)as Connector;
            switch (type)
            {
                case "pattern1":
                    Connector.Type = ConnectorSegmentType.Bezier;
                    break;
                case "pattern2":
                    Connector.Type = ConnectorSegmentType.Bezier;
                    break;
                case "pattern3":
                    Connector.Type = ConnectorSegmentType.Orthogonal;
                    break;
                case "pattern4":
                    Connector.Type = ConnectorSegmentType.Straight;
                    break;
            }
        }
        Diagram.EndGroupAction();
        await Diagram.DoLayout();
    }

    public void OnMindMapLevelChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DefaultDropDownField> args)
    {
        MindMapLevel = args.Value;
    }

    public async Task OnFillColorChange(ColorPickerEventArgs args)
    {
        await UpdateMindMapProperties("Fill", (args.CurrentValue).Hex);
    }

    public async Task OnStrokeColorChange(ColorPickerEventArgs args)
    {
        await UpdateMindMapProperties("StrokeColor", (args.CurrentValue).Hex);
    }

    public async Task OnStrokeDashArrayChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, BorderStylesFields> args)
    {
        await UpdateMindMapProperties("StrokeDashArray", args.Value);
    }

    public async Task OnMindMapOpacityChange(double Value)
    {
        await UpdateMindMapProperties("Opacity", (Value / 100).ToString());
    }

    public async Task OnStrokeWidthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await UpdateMindMapProperties("StrokeWidth", args.Value.ToString());
    }

    public async Task OnFontFamilyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FontFamilyListFields> args)
    {
        await UpdateMindMapProperties("FontFamily", args.Value);
    }

    public async Task OnTextFontSizeChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await UpdateMindMapProperties("FontSize", args.Value.ToString());
    }

    public async Task OnTextPositionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        await UpdateMindMapProperties("TextPosition", args.Value);
    }

    public async Task OnTextColorChange(ColorPickerEventArgs args)
    {
        await UpdateMindMapProperties("FontColor", (args.CurrentValue).Hex);
    }

    public async Task OnTextOpacityChange(double Value)
    {
        await UpdateMindMapProperties("TextOpacity", (Value / 100).ToString());
    }

    private async Task OnTextStyleClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;

        switch (commandType)
        {
            case "Bold":
                BoldCss = (!BoldCss.Contains(" tb-item-selected")) ? BoldCss + " tb-item-selected" : BoldCss.Replace(" tb-item-selected", "");
                break;
            case "Italic":
                ItalicCss = (!ItalicCss.Contains(" tb-item-selected")) ? ItalicCss + " tb-item-selected" : ItalicCss.Replace(" tb-item-selected", "");
                break;
            case "Underline":
                UnderlineCss = (!UnderlineCss.Contains(" tb-item-selected")) ? UnderlineCss + " tb-item-selected" : UnderlineCss.Replace(" tb-item-selected", "");
                break;
        }
        await UpdateMindMapProperties(commandType, "true");
        StateHasChanged();
    }

    public async Task UpdateMindMapProperties(string prop, string Value)
    {
        if (!PreventPropertyChange)
        {
            ObservableCollection<Node> Nodes = Parent.DiagramContent.Diagram.Nodes;
            if (Nodes.Count > 0)
            {
                Node Node;
                for (int i = 0; i < Nodes.Count; i++)
                {
                    Node = Parent.DiagramContent.Diagram.GetObject(Nodes[i].ID)as Node;
                    if (Node.AdditionalInfo != null)
                    {
                        var obj = JsonConvert.SerializeObject(Node.AdditionalInfo, jsonSerializerSettings);
                        DiagramMainContent.NodeAddInfo NodeInfo = JsonConvert.DeserializeObject<DiagramMainContent.NodeAddInfo>(obj);
                        if ("Level" + NodeInfo.Level.ToString() == MindMapLevel || NodeInfo.Level.ToString() == MindMapLevel)
                        {
                            switch (prop)
                            {
                                case "Fill":
                                    Node.Style.Fill = Value;
                                    break;
                                case "StrokeColor":
                                    Node.Style.StrokeColor = Value;
                                    //string[] Connectors = await Parent.DiagramContent.Diagram.GetEdges(Node.ID, false);
                                    //OnUpdateConnectorProperties(Connectors, Value);
                                    break;
                                case "StrokeDashArray":
                                    Node.Style.StrokeDashArray = Value;
                                    break;
                                case "StrokeWidth":
                                    Node.Style.StrokeWidth = Double.Parse(Value);
                                    break;
                                case "Opacity":
                                    Node.Style.Opacity = Double.Parse(Value);
                                    break;
                            }
                            if (Node.Annotations.Count > 0)
                            {
                                ShapeAnnotation Annotation = Node.Annotations[0];
                                switch (prop)
                                {
                                    case "FontFamily":
                                        Annotation.Style.FontFamily = Value;
                                        break;
                                    case "FontSize":
                                        Annotation.Style.FontSize = Int32.Parse(Value);
                                        break;
                                    case "FontColor":
                                        Annotation.Style.Color = Value;
                                        break;
                                    case "TextOpacity":
                                        Annotation.Style.Opacity = Double.Parse(Value);
                                        break;
                                    case "Bold":
                                        Annotation.Style.Bold = !Annotation.Style.Bold;
                                        break;
                                    case "Italic":
                                        Annotation.Style.Italic = !Annotation.Style.Italic;
                                        break;
                                    case "Underline":
                                        Annotation.Style.TextDecoration = (Annotation.Style.TextDecoration == TextDecoration.Underline) ? TextDecoration.None : TextDecoration.Underline;
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    

#line default
#line hidden
#nullable disable
#nullable restore
#line 521 "D:\DiagramBuilder-1-10-2021\DB-1-10-2021-Changes(8-10)\DB-CSS-25-10-2021\DB_TESTING_ISSUES\BLAZ-Diagrambuilder-1-12-2021\blazor-diagram-builder\WebApplication\Pages\MindMapPropertyContainer.razor"
       

    #endregion


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
    }
}
#pragma warning restore 1591
